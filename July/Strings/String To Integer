Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer.

The algorithm for myAtoi(string s) is as follows:

Whitespace: Ignore any leading whitespace (" ").
Signedness: Determine the sign by checking if the next character is '-' or '+', assuming positivity is neither present.
Conversion: Read the integer by skipping leading zeros until a non-digit character is encountered or the end of the string is reached. If no digits were read, then the result is 0.
Rounding: If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then round the integer to remain in the range. Specifically, integers less than -231 should be rounded to -231, and integers greater than 231 - 1 should be rounded to 231 - 1.
Return the integer as the final result.

class Solution {
    public int myAtoi(String s) {
          
         if(s.length()==0 || s == null)
                return 0;
				
        int index=0;
        char sign = '?';
        
       for(int i=0;i<s.length();i++){
            if(s.charAt(i)!=' '){
                if(s.charAt(i)=='-'|| s.charAt(i)=='+'){
                    sign = s.charAt(i);
                    index = i+1;
                    break;
                }else if(Character.isDigit(s.charAt(i))){
                    index = i;
                    break;
                }else
                    return 0;
            }
        }
		
        
        long result=0; 
      
        for(int i=index;i<s.length();i++){
            if(Character.isDigit(s.charAt(i))){
                result = result*10+Character.getNumericValue(s.charAt(i));
                if(result > Integer.MAX_VALUE)
                    break;
            }else
                break;
        }
		
        
        if(sign =='-' && result>Integer.MAX_VALUE)
            result = Integer.MIN_VALUE;
        else if(sign=='-' && result<=Integer.MAX_VALUE)
            result = result*-1;
        else if(result>Integer.MAX_VALUE)
            result = Integer.MAX_VALUE;

        return (int)result;
       
    }
}
