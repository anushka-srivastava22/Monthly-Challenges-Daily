Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:

Pick a non-empty prefix from the string s where all the characters in the prefix are equal.
Pick a non-empty suffix from the string s where all the characters in this suffix are equal.
The prefix and the suffix should not intersect at any index.
The characters from the prefix and suffix must be the same.
Delete both the prefix and the suffix.
Return the minimum length of s after performing the above operation any number of times (possibly zero times).

class Solution {
    public int minimumLength(String s) {
        return deleteSimilarEnds(s, 0, s.length() - 1);
    }

    // Deletes similar ends and returns remaining length
    private int deleteSimilarEnds(String s, int begin, int end) {
        // The ends differ or meet in the middle
        if (begin >= end || s.charAt(begin) != s.charAt(end)) {
            return end - begin + 1;
        } else {
            char c = s.charAt(begin);

            // Delete consecutive occurrences of c from prefix
            while (begin <= end && s.charAt(begin) == c) {
                begin++;
            }

            // Delete consecutive occurrences of c from suffix
            while (end > begin && s.charAt(end) == c) {
                end--;
            }

            return deleteSimilarEnds(s, begin, end);
        }
    }
}
